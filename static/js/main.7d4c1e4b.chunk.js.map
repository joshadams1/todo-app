{"version":3,"sources":["components/NewItem.js","components/ListItems.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["NewItem","props","useState","task","setTask","isRepeat","setRepeat","React","open","setOpen","taskList","setTaskList","Grid","container","direction","justify","className","item","TextField","label","required","id","placeholder","variant","onChange","event","value","target","defaultValue","IconButton","onClick","_","includes","oldArray","disabled","length","alignItems","spacing","Collapse","in","Alert","action","Button","color","size","aria-label","fontSize","severity","ListItems","completedItems","setCompletedItems","setValue","items","TabPanel","children","index","hidden","Box","p","handleClick","without","concat","handleAlert","strippedCompletedList","strippedTaskedList","userPrompt","prompt","Tabs","newValue","Tab","List","map","idx","ListItem","Home","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d4c1e4b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\n\nimport { TextField, Grid, Button, IconButton } from '@material-ui/core';\nimport Collapse from '@material-ui/core/Collapse';\nimport Alert from '@material-ui/lab/Alert';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\n\nconst NewItem = props => {\n    const [task, setTask] = useState(\"\");\n    const [isRepeat, setRepeat] = useState(false);\n    const [open, setOpen] = React.useState(true);\n    const { taskList, setTaskList } = props;\n\n    const handleChange = event => {\n        const { value } = event.target\n        setTask(value);\n    }\n\n    const addToTaskList = () => {\n        // Check for repeats in task list.\n        let repeat = _.includes(taskList, task);\n        if (repeat) {\n            setRepeat(true)\n        } else {\n            setTaskList(oldArray => [...oldArray, task]);\n        }\n    }\n\n    const addRepeat = () => {\n        setTaskList(oldArray => [...oldArray, task]);\n        setRepeat(false);\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n        setRepeat(false);\n    }\n\n    return (\n        <Grid container direction=\"column\" justify=\"center\" className=\"new-item-container\">\n            <Grid item>\n                <TextField\n                    label=\"Task\"\n                    required\n                    id=\"filled-required\"\n                    placeholder=\"Write down task\"\n                    variant=\"outlined\"\n                    onChange={handleChange}\n                    defaultValue={task}\n                ></TextField>\n            </Grid>\n            <Grid item>\n                <IconButton\n                    className=\"\"\n                    onClick={addToTaskList}\n                    disabled={!task.length}\n                    className=\"add-button\"\n                >\n                    <Grid container alignItems=\"baseline\" spacing={2}>\n                        <Grid item>\n                            <AddIcon />\n                        </Grid>\n                        <Grid item>\n                            <span>Add item</span>\n                        </Grid>\n                    </Grid>\n                </IconButton>\n            </Grid>\n\n            {isRepeat ?\n                // Conditional rendering for repeat task alert.\n                <Grid item>\n                    <Collapse in={open}>\n                        <Alert\n                            action={\n                                <div>\n                                    <Button color=\"inherit\" size=\"small\" onClick={addRepeat}>\n                                        Add anyway?\n                                        </Button>\n                                    <IconButton\n                                        aria-label=\"close\"\n                                        color=\"inherit\"\n                                        size=\"small\"\n                                        onClick={handleClose}\n                                    >\n                                        <CloseIcon fontSize=\"inherit\" />\n                                    </IconButton>\n                                </div>\n                            }\n                            severity=\"error\"\n                        >\n                            This task is already on your list\n                            </Alert>\n                    </Collapse>\n                </Grid>\n                : \"\"}\n        </Grid>\n    )\n}\n\nexport default NewItem;","import React, { useState } from 'react';\nimport _ from 'lodash';\n\nimport { List, ListItem, IconButton, Tabs, Tab, Box, Grid } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CompleteIcon from '@material-ui/icons/Done';\nimport PendingIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport EditIcon from '@material-ui/icons/Edit';\n\n\nconst ListItems = props => {\n    const [completedItems, setCompletedItems] = useState([]);\n    const [value, setValue] = useState(0);\n    const { items, setTaskList } = props;\n\n    /* \n       Tab panel component from Material UI documentation. \n       See \"Simple Tabs\" section: https://material-ui.com/components/tabs/#tabs\n    */\n    const TabPanel = props => {\n        const { children, value, index } = props;\n\n        return (\n            <div hidden={value !== index}>\n                {value === index && (\n                    <Box p={3}>\n                        <div>{children}</div>\n                    </Box>\n                )}\n            </div>\n        );\n    }\n\n    const handleClick = (item, action) => {\n        if (action === 'delete') {\n            // Sets a new array without the selected item for both pending and completed.\n            setTaskList(_.without(items, item));\n            setCompletedItems(_.without(completedItems, item));\n        } else if (action === 'completed') {\n            setCompletedItems(_.concat(completedItems, item));\n        } else {\n            setCompletedItems(_.without(completedItems, item));\n        }\n    }\n\n    const handleAlert = task => {\n        let strippedCompletedList = [];\n        let strippedTaskedList = [];\n        let userPrompt = prompt('Please enter the new task name');\n\n        if (!userPrompt) {\n            userPrompt = prompt('You must enter a new value while editing');\n        }\n\n        // Pulls out original item and replaces it.\n        if (_.includes(completedItems, task)) {\n            strippedCompletedList = _.without(completedItems, task);\n            strippedTaskedList = _.without(items, task);\n\n            setCompletedItems(_.concat(strippedCompletedList, userPrompt));\n            setTaskList(_.concat(strippedTaskedList, userPrompt));\n        } else {\n            strippedTaskedList = _.without(items, task);\n            setTaskList(_.concat(strippedTaskedList, userPrompt));\n        }\n    }\n\n    const handleChange = (event, newValue) => setValue(newValue);\n\n    return (\n        <div>\n            <h4>Tasks</h4>\n            <Tabs value={value} onChange={handleChange}>\n                <Tab label='All Tasks' />\n                <Tab label='Pending' />\n                <Tab label='Completed' />\n            </Tabs>\n\n            <TabPanel value={value} index={0}>\n                <Grid container justify=\"center\">\n                    <Grid item>\n                        <List>\n                            {items.map((item, idx) => {\n                                return (\n                                    <div hidden={!_.includes(items, item)} key={idx}>\n                                        <ListItem>\n                                            {item}\n                                            <IconButton onClick={() => handleAlert(item)}>\n                                                <EditIcon />\n                                            </IconButton>\n\n                                            {/* Allows for the task to be flipped between pending and completed */}\n                                            {\n                                                !_.includes(completedItems, item) ?\n                                                    <IconButton onClick={() => handleClick(item, 'completed')}>\n                                                        <PendingIcon />\n                                                    </IconButton>\n                                                    : <IconButton onClick={() => handleClick(item)}>\n                                                        <CompleteIcon />\n                                                    </IconButton>\n                                            }\n\n                                            <IconButton onClick={() => handleClick(item, 'delete')}>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItem>\n                                    </div>\n                                )\n                            })}\n                        </List>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n\n            <TabPanel value={value} index={1}>\n                <Grid container justify=\"center\">\n                    <Grid item>\n                        <List>\n                            {items.map((item, idx) => {\n                                if (!_.includes(completedItems, item)) {\n                                    return (\n                                        <div hidden={!_.includes(items, item)} key={idx}>\n                                            <ListItem>\n                                                {item}\n                                                <IconButton onClick={() => handleAlert(item)}>\n                                                    <EditIcon />\n                                                </IconButton>\n\n                                                {\n                                                    !_.includes(completedItems, item) ?\n                                                        <IconButton onClick={() => handleClick(item, 'completed')}>\n                                                            <PendingIcon />\n                                                        </IconButton>\n                                                        : <IconButton onClick={() => handleClick(item)}>\n                                                            <CompleteIcon />\n                                                        </IconButton>\n                                                }\n\n                                                <IconButton onClick={() => handleClick(item, 'delete')}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </ListItem>\n                                        </div>\n                                    )\n                                }\n                            })}\n                        </List>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n\n            <TabPanel value={value} index={2}>\n                <Grid container justify=\"center\">\n                    <Grid item>\n                        <List>\n                            {completedItems.map((item, idx) => {\n                                return (\n                                    <ListItem key={idx}>\n                                        {item}\n                                        <IconButton onClick={() => handleAlert(item)}>\n                                            <EditIcon />\n                                        </IconButton>\n                                        <IconButton onClick={() => handleClick(item)}>\n                                            <CompleteIcon />\n                                        </IconButton>\n                                        <IconButton onClick={() => handleClick(item, 'delete')}>\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n        </div>\n    )\n}\n\nexport default ListItems;","import React, { useState } from 'react';\n\nimport NewItem from './NewItem';\nimport ListItems from './ListItems';\n\nimport { Grid } from '@material-ui/core';\n\nconst Home = () => {\n    const [taskList, setTaskList] = useState([]);\n\n\n    return (\n\n        <div>\n            <h1>To-Do List</h1>\n            <Grid container alignItems=\"baseline\" justify=\"space-around\" spacing={5}>\n                <Grid item>\n                    <NewItem setTaskList={setTaskList} taskList={taskList} />\n                </Grid>\n                <Grid item>\n                    <ListItems items={taskList} setTaskList={setTaskList} />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Home;","import './App.scss';\n\nimport Home from './components/Home';\n\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* Create client side routing */}\n          <Switch>\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}